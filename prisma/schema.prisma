generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  password      String?
  accounts      Account?
  Authenticator Authenticator[]
  expenses      Expense[]
  partitionExpenses    PartitionExpense[]
  expenseGroupUser ExpenseGroupUser[]
  sessions      Session[]
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model ExpenseGroupUser {
  userId   String
  groupId  String

  group    ExpenseGroup      @relation(fields: [groupId], references: [id])
  user     User        @relation(fields: [userId], references: [id])
  @@index([userId,groupId])
  @@id([userId,groupId])
}

model ExpenseGroup {
  id         String      @id @default(cuid())
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  expenses   Expense[]
  expenseGroupUser ExpenseGroupUser[]
}

model Expense {
  id          String      @id @default(cuid())
  userId      String
  date        DateTime    @default(now()) @db.Timestamp(0)
  description String
  category    String
  amount      Float
  groupId     String?
  updatedAt   DateTime    @updatedAt
  group       ExpenseGroup?      @relation(fields: [groupId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  partitionExpenses  PartitionExpense[]

  @@index([userId,groupId])
}

model PartitionExpense {
  id        String   @id @default(cuid())
  expenseId String
  userId    String
  amount    Float
  expense   Expense  @relation(fields: [expenseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  updatedAt DateTime @updatedAt
}
